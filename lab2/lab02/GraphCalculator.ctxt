#BlueJ class context
comment0.target=GraphCalculator
comment0.text=\r\n\ GraphCalculator.java\r\n\ \r\n\ @author\ Carolina\ Cepeda,\ Juanita\ Rubiano\r\n
comment1.params=
comment1.target=GraphCalculator()
comment1.text=\r\n\ Constructor\ de\ calculadora\ de\ grafos\r\n
comment10.params=grafo\ a\ b
comment10.target=void\ eliminarArco(Graph,\ java.lang.String,\ java.lang.String)
comment10.text=\r\n\ Funci\u00F3n\ que\ elimina\ un\ arco\ entre\ dos\ vertices\ del\ conjunto\ de\ arcos\r\n\ del\ grafo\ dado.\r\n\ @param\ Graph\ grafo,\ String\ vertice\ a\ ,\ String\ vertice\ b\r\n\ @return\ void\r\n
comment11.params=grafo\ vertices
comment11.target=boolean\ conjuntoPertenece(Graph,\ java.lang.String[])
comment12.params=graf1\ graf2
comment12.target=boolean\ sameGraphExactly(Graph,\ Graph)
comment12.text=\ No\ se\ lleva\ a\ cabo\r\n\ \r\n\ private\ ArrayList<String>\ mostrarCamino(Graph\ grafo,\ String[]\ vertices){\r\n\ \r\n\ ArrayList\ <\ String\ >\ caminoCompleto\ \=\ new\ ArrayList<>();\r\n\ ArrayList\ <String>\ listaVertices\=\ new\ ArrayList\ <>\ (Arrays.asList(vertices));\r\n\ \r\n\ for\ (int\ i\ \=\ 0;\ i\ <\ listaVertices.size()\ -1\ ;\ i++\ ){\r\n\ String\ inicio\ \=\ listaVertices.get(i);\r\n\ String\ destino\ \=\ listaVertices.get(i+1);\r\n\ ArrayList<String>\ subcamino\ \=\ grafo.path(inicio,\ destino);\r\n\ caminoCompleto.addAll(subcamino);\r\n\ }\r\n\ return\ caminoCompleto;\r\n\ }\r\n
comment13.params=
comment13.target=boolean\ ok()
comment13.text=\r\n\ Metodo\ que\ revisa\ q\ todas\ las\ operaciones\ se\ realizaron\ correctamente.\r\n\ @return\ boolean\r\n
comment2.params=
comment2.target=Graph\ getultGrafo()
comment2.text=\r\n\ M\u00E9todo\ para\ obtener\ el\ \u00FAltimo\ grafo\ en\ el\ TreeMap\r\n
comment3.params=
comment3.target=java.util.TreeMap\ getVariables()
comment3.text=\r\n\ Get\ Variables\r\n\ \r\n\ @return\ Treemap\r\n
comment4.params=nombre
comment4.target=void\ create(java.lang.String)
comment4.text=\r\n\ Crea\ una\ nueva\ variable\r\n\ \r\n\ @param\ String\ nombre\r\n\ @return\ void\r\n
comment5.params=nombre_graph\ vertices\ edges
comment5.target=void\ assign(java.lang.String,\ java.lang.String[],\ java.lang.String[][])
comment5.text=\r\n\ Assign\ a\ graph\ to\ an\ existing\ variable\r\n\ a\ \:\=\ graph\r\n\ \r\n\ @param\ \:\ String,\ String\ [],\ String[][]\r\n
comment6.params=a\ b\ op\ vertices
comment6.target=void\ assignUnary(java.lang.String,\ java.lang.String,\ char,\ java.lang.String[])
comment6.text=\r\n\ \r\n\ Assigns\ the\ value\ of\ a\ binary\ operation\ to\ a\ variable\r\n\ a\ \=\ b\ op\ v*\r\n\ The\ operator\ characters\ are\:\ '+'\ adding\ a\ edge\ between\ two\ vertices,\ '-'\r\n\ removing\ a\ edge\ between\ two\ vertex\r\n\ '?'\ checking\ if\ a\ graph\ contains\ the\ given\ vertices\r\n\ 'p'\ return\ the\ graph\ with\ a\ path\ that\ passes\ through\ all\ the\ vertices\ in\ the\r\n\ indicated\ order\r\n
comment7.params=a\ b\ op\ c
comment7.target=Graph\ assignBinary(java.lang.String,\ java.lang.String,\ char,\ java.lang.String)
comment7.text=\ Assigns\ the\ value\ of\ a\ binary\ operation\ to\ a\ variable\r\n\ \ \ \ a\ \=\ b\ op\ c\r\n\ \ \ \ The\ operator\ characters\ are\:\ 'u'\ union,\ 'i'\ intersection,\ 'd'\ difference,\ 'j'join\r\n
comment8.params=graph
comment8.target=java.lang.String\ toString(Graph)
comment8.text=\r\n\ Returns\ the\ graph\ with\ the\ edges\ in\ uppercase\ in\ alphabetical\ order.\r\n
comment9.params=grafo\ a\ b
comment9.target=void\ insertarArco(Graph,\ java.lang.String,\ java.lang.String)
comment9.text=\r\n\ Funci\u00F3n\ que\ inserta\ un\ arco\ entre\ dos\ vertices\ al\ conjunto\ de\ arcos\r\n\ del\ grafo\ dado.\r\n\ @param\ Graph\ grafo,\ String\ vertice\ a\ ,\ String\ vertice\ b\r\n\ @return\ void\r\n
numComments=14
