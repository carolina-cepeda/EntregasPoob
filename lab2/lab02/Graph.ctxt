#BlueJ class context
comment0.target=Graph
comment1.params=vertices\ edges
comment1.target=Graph(java.lang.String[],\ java.lang.String[][])
comment1.text=\r\n\ Constructor\ que\ inicializa\ el\ grafo\ con\ un\ conjunto\ de\ v\u00E9rtices\ y\ aristas.\r\n\ Convierte\ todos\ los\ nombres\ de\ v\u00E9rtices\ a\ may\u00FAsculas\ y\ elimina\ duplicados.\r\n\r\n\ @param\ vertices\ Lista\ de\ v\u00E9rtices\r\n\ @param\ edges\ Matriz\ de\ aristas,\ donde\ cada\ arista\ es\ un\ par\ de\ v\u00E9rtices\r\n
comment10.params=args
comment10.target=void\ main(java.lang.String[])
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\r\n\ Retorna\ una\ representaci\u00F3n\ en\ cadena\ del\ grafo,\ se\ usa\ @Override\ ya\ que\ el\ m\u00E9todo\ toString(),\r\n\ se\ esta\ sobrescribiendo\ el\ m\u00E9todo\ toString()\ de\ la\ clase\ base\ Object\ de\ java.\r\n\r\n\ @return\ Una\ cadena\ que\ representa\ las\ aristas\ del\ grafo\ en\ el\ formato\ (A,\ B)\ (C,\ D)\ ...\r\n
comment12.params=a\ b
comment12.target=void\ insertarArco(java.lang.String,\ java.lang.String)
comment12.text=\r\n\ Funci\u00F3n\ que\ inserta\ un\ arco\ entre\ dos\ vertices\ al\ conjunto\ de\ arcos\r\n\ del\ grafo.\r\n\ \r\n\ @param\ String\ vertice\ a\ ,\ String\ vertice\ b\r\n\ @return\ void\r\n
comment13.params=a\ b
comment13.target=void\ eliminarArco(java.lang.String,\ java.lang.String)
comment13.text=\r\n\ Funci\u00F3n\ que\ elimina\ un\ arco\ entre\ dos\ vertices\ del\ conjunto\ de\ arcos\r\n\ del\ grafo.\r\n\ \r\n\ @param\ String\ vertice\ a\ ,\ String\ vertice\ b\r\n\ @return\ void\r\n
comment14.params=vertice
comment14.target=boolean\ enElGrafo(java.lang.String)
comment14.text=\r\n\ Funci\u00F3n\ que\ verifica\ si\ un\ v\u00E9rtice\ dado\ es\ parte\ de\r\n\ el\ conjunto\ de\ vertices\ del\ grafo\r\n\ \r\n\ @param\ String\ vertices\r\n\ @return\ boolean\r\n
comment15.params=
comment15.target=java.util.ArrayList\ losVertices()
comment15.text=\r\n\ Funci\u00F3n\ que\ retorna\ los\ vertices\ del\ grafo\r\n\ \r\n\ @return\ ArrayList<String>\r\n
comment16.params=
comment16.target=java.util.ArrayList\ losEdges()
comment16.text=\r\n\ Funci\u00F3n\ que\ retorna\ los\ arcos\ del\ grafo\r\n\ \r\n\ @return\ ArrayList<ArrayList<String>>\r\n
comment17.params=g
comment17.target=Graph\ join(Graph)
comment17.text=\r\n\ M\u00E9todo\ que\ calcula\ la\ junta\ de\ dos\ grafos.\r\n\ @return\ un\ grafo\ que\ es\ el\ resultado\ de\ la\ junta\ entre\ el\ grafo\ actual\ y\ el\ grafo\ g\r\n
comment18.params=g
comment18.target=Graph\ difference(Graph)
comment18.text=\r\n\ M\u00E9todo\ que\ calcula\ la\ diferencia\ de\ dos\ grafos.\r\n\ \ \ \ \ *\ @return\ un\ grafo\ que\ es\ el\ resultado\ de\ la\ diferencia\ entre\ el\ grafo\ actual\ y\ el\ grafo\ g\r\n
comment19.params=g
comment19.target=Graph\ intersection(Graph)
comment19.text=\r\n\ M\u00E9todo\ que\ calcula\ la\ intersecci\u00F3n\ de\ dos\ grafos.\r\n\ \ \ \ \ *\ @return\ un\ grafo\ que\ es\ el\ resultado\ de\ la\ intersecci\u00F3n\ entre\ el\ grafo\ actual\ y\ el\ grafo\ g\r\n
comment2.params=vertices\ edges
comment2.target=Graph(java.util.ArrayList,\ java.util.ArrayList)
comment2.text=\r\n\ *\ Se\ hizo\ una\ sobre\ escritura\ de\ constructor\ para\ ser\ utilizado\ en\ el\ metodo\ de\ Union.\r\n\ Se\ utilizo\ programacion\ funcional\r\n\ Constructor\ que\ recibe\ listas\ de\ v\u00E9rtices\ y\ aristas.\r\n\ Convierte\ los\ nombres\ a\ may\u00FAsculas\ y\ elimina\ duplicados.\r\n\r\n\ @param\ vertices\ Lista\ de\ v\u00E9rtices\r\n\ @param\ edges\ Lista\ de\ aristas\r\n
comment3.params=start\ end
comment3.target=Graph\ path(java.lang.String,\ java.lang.String)
comment4.params=vertex
comment4.target=java.util.ArrayList\ getNeighbors(java.lang.String)
comment5.params=g
comment5.target=Graph\ union(Graph)
comment5.text=\r\n\ Calcula\ la\ uni\u00F3n\ de\ este\ grafo\ con\ otro\ grafo.\r\n\r\n\ @param\ g\ Grafo\ con\ el\ cual\ se\ quiere\ unir\r\n\ @return\ Nuevo\ grafo\ que\ representa\ la\ uni\u00F3n\ de\ ambos\r\n
comment6.params=edgeList\ edge
comment6.target=boolean\ containsEdge(java.util.ArrayList,\ java.util.ArrayList)
comment6.text=\r\n\ Verifica\ si\ una\ lista\ de\ aristas\ contiene\ una\ arista\ espec\u00EDfica.\r\n\r\n\ @param\ edgeList\ Lista\ de\ aristas\r\n\ @param\ edge\ Arista\ a\ verificar\r\n\ @return\ true\ si\ la\ arista\ ya\ existe\ en\ la\ lista,\ false\ en\ caso\ contrario\r\n
comment7.params=
comment7.target=int\ vertices()
comment7.text=\r\n\ Retorna\ la\ cantidad\ de\ vertices\ del\ grafo\r\n
comment8.params=
comment8.target=int\ edges()
comment8.text=\r\n\ Retorna\ la\ cantidad\ de\ aristas\ del\ grafo\r\n
comment9.params=o
comment9.target=boolean\ equals(java.lang.Object)
comment9.text=\r\n\ Verifica\ si\ dos\ grafos\ son\ iguales\ comparando\ v\u00E9rtices\ y\ aristas.\r\n
numComments=20
